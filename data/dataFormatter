#!/usr/bin/env python
from array import array
import json
import operator
import tokenize
import re
import sys
import os

###############
### PARAMETERS:

# general:
nParticipants = 145
nArticles = 183
gdf_name = "bipartite_nodes_CSCW2013_URL_time.gdf"  # input file name
json_name = "data.json"                             # JSON output file name

# file names
simUsers_name = "clustering/users/SimUsers.txt"         # Similarity output file name
simPapers_name = "clustering/papers/SimPapers.txt"
prefUsers_name = "clustering/users/PrefUsers.txt"       # Preferences output file name
prefPapers_name = "clustering/papers/PrefPapers.txt"
mapUsers_name = "clustering/users/MapUsers.txt"         # Map file relating seq ids to original ones
mapPapers_name = "clustering/papers/MapPapers.txt"
binUsers_name = "clustering/users/affinity.bin"			# Binary file to affinity propagation
binPapers_name = "clustering/papers/affinity.bin"

# delimiters
rDel = None
pDel = nParticipants
aDel = nParticipants + nArticles

# weighted link between a and b
class Link:
    a = ""
    b = ""
    weight = 0
    def __init__(self, a, b, weight):
        self.a = a
        self.b = b
        self.weight = weight

########################
### AUXILIARY FUNCTIONS:

# import data from .gdf
def importData (gdf_file, write) :

    content = gdf_file.readlines()
    json_data, elem_list, part, data, art, rel = ({} for i in range(6))
    part_list, art_list, rel_list, cluster_data = ([] for i in range(4))

    rDel = len(content)

    for i,c in enumerate(content):
        if (i <= pDel and i > 0):
            elem_list = c.rstrip("'\n").rstrip("'").split("','");

            if(len(elem_list) == 6):
                part = {}
                data = {}
                data['label'] = elem_list[1]
                data['labelShort'] = elem_list[2]
                data['url'] = elem_list[4]
                data['date'] = elem_list[5]
                part['name'] = "user."+elem_list[3] + "." + elem_list[0][1:]
                part['data'] = data
                part['imports'] = []
                part_list.append(part)

        elif (i > nParticipants and i <= aDel) :
            elem_list = c.rstrip("'\n").rstrip("'").split("','");

            if(len(elem_list) == 6):
                art = {}
                data = {}
                data['label'] = elem_list[1]
                data['labelShort'] = elem_list[2]
                data['url'] = elem_list[4]
                data['date'] = elem_list[5]
                art['name'] = "paper."+elem_list[3] + "." + elem_list[0][1:]
                art['data'] = data
                art['imports'] = []
                art_list.append(art)

        elif (i > nParticipants+nArticles+1 and i <= rDel) :
            elem_list = c.rstrip("'\n").rstrip("'").split("','");

            if(len(elem_list) == 3):
                rel = {}
                rel['relUser'] = elem_list[0][1:]
                rel['relPaper'] = elem_list[1]
                rel['relTime'] = elem_list[2]

                userType = "user."
                paperType = "talk."
                currentUser = "user." + userType + elem_list[0][1:]
                currentPaper = "paper." + paperType + elem_list[1]

                # create entries to 'imports' in users and papers
                for e in part_list:
                    if (e['name'] == currentUser):
                        e['imports'].append(currentPaper)
                for e in art_list:
                    if (e['name'] == currentPaper):
                        e['imports'].append(currentUser)

                rel_list.append(rel)

    if(write):
        json_file = open(json_name, "w")
        json_file.write( json.dumps(part_list+art_list, json_file, indent=4) )

    return (part_list, art_list, rel_list)

def mapping (id_dict):
    new_id_dict = {}
    mapping_string = ""
    for i,u in enumerate(id_dict):
        oldid = u['name'].split('.')[-1]
        new_id_dict[oldid] = i+1
        mapping_string += oldid + ' ' + str(new_id_dict[oldid]) + '\n'

    return (new_id_dict, mapping_string)

# given a dictionary and a value, retrieve first key (k)
def retrieveKey (dictio, value):
    value = int(value)
    for k, v in dictio.iteritems():
        if v == value:
            return k
    return None

# returns a list of [item, count] given a dictionary and a field
def counting (dictio, field, pTop=0):
    unsortedCount = {}
    for r in dictio:
        key = str(r[field])
        if(not (key in unsortedCount)):
            unsortedCount[key] = 1
        else:
            unsortedCount[key] += 1
    count = sorted(unsortedCount.items(), key=operator.itemgetter(1), reverse=True)
    for c in range(0, pTop):
        print('\tItem ' + count[c][0] + ' has ' + str(count[c][1]) + ' objects connected to ')
    print("")

    return count

# for every pair within lis elements, count how many items in 'importfield' they share
def countPairs (lis, lookup, namefield='name', importfield='imports', pTop=0):
    sim = pref = ""
    size = len(lis)
    pairs = []
    aff = [[0 for x in range(size)] for x in range(size)]
    for ui1 in range(0, size):
        for ui2 in range(ui1+1, size):
            i1 = lis[ui1]
            i2 = lis[ui2]
            n1 = lookup[ i1[namefield].split('.')[-1] ]
            n2 = lookup[ i2[namefield].split('.')[-1] ]

            inter = set(i1[importfield]).intersection(i2[importfield])
            sizeInter = len(inter)
            if(size != 0) :
                pairs.append( Link(a=str(n1), b=str(n2), weight=sizeInter) )
                sim += str(n1) + ' ' + str(n2) + ' ' + str(sizeInter*-1) + '\n'
                aff[n1-1][n2-1] = -1*sizeInter
                aff[n2-1][n1-1] = -1*sizeInter
                aff[n1-1][n1-1] = -1
                aff[n2-1][n2-1] = -1
            pref += "-1\n"
    # sorts the pairs list
    pairs.sort(key=lambda x: x.weight, reverse=True)

    for c in range (0,pTop):
        if (pairs[c].weight):
            print('\t'+str(c+1)+': '+retrieveKey(lookup, pairs[c].a)+' and '+retrieveKey(lookup, pairs[c].b)+' have '+str(pairs[c].weight) + ' items in common')
    print("")

    return (pairs, sim, pref, aff)

def writeToFile (output, file_name):
    with open(file_name, "w") as file:
	    file.write(output)

def getClusters (cluster_file, id_list):
    ids = cluster_file.readlines()
    cluster_file.close()
    cluster = {}
    for i,e in enumerate(ids):
        newid = retrieveKey(id_list, i+1)
        cluster.setdefault(e[:-2], []).append(newid)

    return cluster

def readIdxFiles ():
    idx_file = None
    while (not idx_file):
        print("Paste the 'idx.txt' from the affinity runs in users/ and papers/ and press enter")
        raw_input()
        try:
            idxUsers_file = open("users/idx.txt","r")
            idxPapers_file = open("papers/idx.txt","r")
        except:
            continue
        return (idxUsers_file, idxPapers_file)

def writeToBinFile (values, file_name):
	size = len(values[0])
	values = sum(values, [])
	#values = map(lambda x: x*-1, values)
	values.insert(0,size)
	print(len(values))
	def splitNumber (num):		# in case num is larger than 1 byte (0-255)
		num = map(int, str(num))
		lst = []
		while num > 0:
		    lst.append(num & 0xFF)
		    num >>= 8
		return lst[::-1]

	with open(file_name, 'wb') as f:
		values = array('d', values)
		values.tofile(f)

	for i in range(0,10):
		sys.stdout.write(str(values[i])+' ')
	print("")


####################
### EXPLORE THE DATA
def similarity (gdf_file) :

    part_list, art_list, rel_list = importData (gdf_file, write=True)

    # Mapping
    newUid, mapUsers = mapping (part_list)
    newPid, mapPapers = mapping (art_list)

    # Count singles
    uSingles = counting (rel_list, 'relUser', pTop=10)
    pSingles = counting (rel_list, 'relPaper', pTop=10)

    # Count pairs
    uPairs,simUsers,prefUsers,affinityUsers = countPairs (lis=part_list,lookup=newUid, pTop=10)
    pPairs,simPapers,prefPapers,affinityPapers = countPairs (lis=art_list,lookup=newPid, pTop=10)

    # Write txt files
    writeToFile (mapUsers,   mapUsers_name)
    writeToFile (mapPapers,  mapPapers_name)
    writeToFile (prefUsers,  prefUsers_name)
    writeToFile (prefPapers, prefPapers_name)
    writeToFile (simUsers,   simUsers_name)
    writeToFile (simPapers,  simPapers_name)

	# Write binary files
    writeToBinFile (affinityUsers,  binUsers_name)
    writeToBinFile (affinityPapers, binPapers_name)

    # Create zip files for affinity program
    os.chdir("clustering/users")
    os.system("rm users.zip; zip users.zip -r . -i SimUsers.txt")
    os.chdir("../papers")
    os.system("rm papers.zip; zip papers.zip -r . -i SimPapers.txt")
    os.chdir("../")

    # Read idx.txt and get clusters
    idxUsers_file, idxPapers_file = readIdxFiles()
    userClusters = getClusters(cluster_file=idxUsers_file, id_list=newUid)
    paperClusters = getClusters(cluster_file=idxPapers_file, id_list=newPid)

    print("# paper clusters: "+str(paperClusters)+'\n\n# user clusters: '+str(userClusters)+'\n')

    return True

#########
### MAIN:
def main () :

    gdf_file = open(gdf_name, "r")

    if(similarity(gdf_file)) :
        print ("Similarity analysis complete.")

main()
